// <auto-generated />
using System;
using EF_CORE_Training;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_CORE_Training.Migrations
{
    [DbContext(typeof(TrainingContext))]
    partial class TrainingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EF_CORE_Training.Adress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("EF_CORE_Training.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AuthorAdressId")
                        .HasColumnType("int");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorAdressId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("EF_CORE_Training.Book", b =>
                {
                    b.Property<int>("ISBN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ISBN"), 1L, 1);

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<int?>("BookAuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("BookPublisherId")
                        .HasColumnType("int");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ISBN");

                    b.HasIndex("BookAuthorId");

                    b.HasIndex("BookPublisherId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("EF_CORE_Training.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PublisherAdressId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PublisherAdressId");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("EF_CORE_Training.Author", b =>
                {
                    b.HasOne("EF_CORE_Training.Adress", "AuthorAdress")
                        .WithMany()
                        .HasForeignKey("AuthorAdressId");

                    b.Navigation("AuthorAdress");
                });

            modelBuilder.Entity("EF_CORE_Training.Book", b =>
                {
                    b.HasOne("EF_CORE_Training.Author", "BookAuthor")
                        .WithMany()
                        .HasForeignKey("BookAuthorId");

                    b.HasOne("EF_CORE_Training.Publisher", "BookPublisher")
                        .WithMany()
                        .HasForeignKey("BookPublisherId");

                    b.Navigation("BookAuthor");

                    b.Navigation("BookPublisher");
                });

            modelBuilder.Entity("EF_CORE_Training.Publisher", b =>
                {
                    b.HasOne("EF_CORE_Training.Adress", "PublisherAdress")
                        .WithMany()
                        .HasForeignKey("PublisherAdressId");

                    b.Navigation("PublisherAdress");
                });
#pragma warning restore 612, 618
        }
    }
}
